// Generated by CoffeeScript 1.6.3
(function() {
  var RactiveDatastore;

  RactiveDatastore = (function() {
    function RactiveDatastore(appKey, elementName, template, initialData) {
      this.appKey = appKey;
      this.elementName = elementName;
      this.template = template;
      this.initialData = initialData;
      this.client = new Dropbox.Client({
        key: this.appKey
      });
      this.client.authenticate({
        interactive: false
      });
      this.authenticated = this.client.isAuthenticated();
      if (this.authenticated) {
        this.initialize();
      }
    }

    RactiveDatastore.prototype.authenticate = function() {
      return this.client.authenticate();
    };

    RactiveDatastore.prototype.initialize = function() {
      var _this = this;
      return this.client.getDatastoreManager().openDefaultDatastore(function(error, datastore) {
        var key, makeSetter, ractive, record, update, value, _i, _len, _ref, _ref1;
        ractive = new Ractive({
          el: _this.elementName,
          template: _this.template
        });
        update = function(record) {
          _this.suppress = true;
          ractive.set(record.getId(), record.get('value'));
          return _this.suppress = false;
        };
        makeSetter = function(key) {
          return function(value) {
            if (!_this.suppress) {
              return _this.set(key, value);
            }
          };
        };
        _this.table = datastore.getTable('ractivedatastore');
        _ref = _this.initialData;
        for (key in _ref) {
          value = _ref[key];
          _this.table.getOrInsert(key, {
            value: value
          });
          ractive.observe(key, makeSetter(key), {
            init: false
          });
        }
        _ref1 = _this.table.query();
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          record = _ref1[_i];
          update(record);
        }
        return datastore.recordsChanged.addListener(function(event) {
          var _j, _len1, _ref2, _results;
          _ref2 = event.affectedRecordsForTable('ractivedatastore');
          _results = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            record = _ref2[_j];
            _results.push(update(record));
          }
          return _results;
        });
      });
    };

    RactiveDatastore.prototype.set = function(key, value) {
      return this.table.get(key).set('value', value);
    };

    return RactiveDatastore;

  })();

  (typeof exports !== "undefined" && exports !== null ? exports : this).RactiveDatastore = RactiveDatastore;

}).call(this);
